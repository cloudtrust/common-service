// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/errors (interfaces: DetailedError)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/detailederr.go -package=mock -mock_names=DetailedError=DetailedError github.com/cloudtrust/common-service/v2/errors DetailedError
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// DetailedError is a mock of DetailedError interface.
type DetailedError struct {
	ctrl     *gomock.Controller
	recorder *DetailedErrorMockRecorder
	isgomock struct{}
}

// DetailedErrorMockRecorder is the mock recorder for DetailedError.
type DetailedErrorMockRecorder struct {
	mock *DetailedError
}

// NewDetailedError creates a new mock instance.
func NewDetailedError(ctrl *gomock.Controller) *DetailedError {
	mock := &DetailedError{ctrl: ctrl}
	mock.recorder = &DetailedErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DetailedError) EXPECT() *DetailedErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *DetailedError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *DetailedErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*DetailedError)(nil).Error))
}

// ErrorMessage mocks base method.
func (m *DetailedError) ErrorMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// ErrorMessage indicates an expected call of ErrorMessage.
func (mr *DetailedErrorMockRecorder) ErrorMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorMessage", reflect.TypeOf((*DetailedError)(nil).ErrorMessage))
}

// Status mocks base method.
func (m *DetailedError) Status() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *DetailedErrorMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*DetailedError)(nil).Status))
}
