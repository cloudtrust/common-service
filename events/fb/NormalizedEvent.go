// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NormalizedEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsNormalizedEvent(buf []byte, offset flatbuffers.UOffsetT) *NormalizedEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NormalizedEvent{}
	x.Init(buf, n+offset)
	return x
}

func FinishNormalizedEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNormalizedEvent(buf []byte, offset flatbuffers.UOffsetT) *NormalizedEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NormalizedEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNormalizedEventBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NormalizedEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NormalizedEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NormalizedEvent) EventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) EventType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) EventDatetime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NormalizedEvent) MutateEventDatetime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *NormalizedEvent) EventSource() EventSource {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return EventSource(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NormalizedEvent) MutateEventSource(n EventSource) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func (rcv *NormalizedEvent) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) ClientId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) ActorUsername() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) ActorUserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) ActorRealmName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) TargetUsername() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) TargetUserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) TargetRealmName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) OperationType() OperationType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return OperationType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NormalizedEvent) MutateOperationType(n OperationType) bool {
	return rcv._tab.MutateInt8Slot(28, int8(n))
}

func (rcv *NormalizedEvent) ResourceType() ResourceType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return ResourceType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NormalizedEvent) MutateResourceType(n ResourceType) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

func (rcv *NormalizedEvent) Representation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NormalizedEvent) EventDetails(obj *Tuple, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *NormalizedEvent) EventDetailsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NormalizedEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func NormalizedEventAddEventId(builder *flatbuffers.Builder, eventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(eventId), 0)
}
func NormalizedEventAddEventType(builder *flatbuffers.Builder, eventType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(eventType), 0)
}
func NormalizedEventAddEventDatetime(builder *flatbuffers.Builder, eventDatetime int64) {
	builder.PrependInt64Slot(2, eventDatetime, 0)
}
func NormalizedEventAddEventSource(builder *flatbuffers.Builder, eventSource EventSource) {
	builder.PrependInt8Slot(3, int8(eventSource), 0)
}
func NormalizedEventAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origin), 0)
}
func NormalizedEventAddClientId(builder *flatbuffers.Builder, clientId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(clientId), 0)
}
func NormalizedEventAddActorUsername(builder *flatbuffers.Builder, actorUsername flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(actorUsername), 0)
}
func NormalizedEventAddActorUserId(builder *flatbuffers.Builder, actorUserId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(actorUserId), 0)
}
func NormalizedEventAddActorRealmName(builder *flatbuffers.Builder, actorRealmName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(actorRealmName), 0)
}
func NormalizedEventAddTargetUsername(builder *flatbuffers.Builder, targetUsername flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(targetUsername), 0)
}
func NormalizedEventAddTargetUserId(builder *flatbuffers.Builder, targetUserId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(targetUserId), 0)
}
func NormalizedEventAddTargetRealmName(builder *flatbuffers.Builder, targetRealmName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(targetRealmName), 0)
}
func NormalizedEventAddOperationType(builder *flatbuffers.Builder, operationType OperationType) {
	builder.PrependInt8Slot(12, int8(operationType), 0)
}
func NormalizedEventAddResourceType(builder *flatbuffers.Builder, resourceType ResourceType) {
	builder.PrependInt8Slot(13, int8(resourceType), 0)
}
func NormalizedEventAddRepresentation(builder *flatbuffers.Builder, representation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(representation), 0)
}
func NormalizedEventAddEventDetails(builder *flatbuffers.Builder, eventDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(eventDetails), 0)
}
func NormalizedEventStartEventDetailsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NormalizedEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
