// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-service/v2/healthcheck (interfaces: HealthDatabase)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/healthcheck.go -package=mock -mock_names=HealthDatabase=HealthDatabase github.com/cloudtrust/common-service/v2/healthcheck HealthDatabase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// HealthDatabase is a mock of HealthDatabase interface.
type HealthDatabase struct {
	ctrl     *gomock.Controller
	recorder *HealthDatabaseMockRecorder
	isgomock struct{}
}

// HealthDatabaseMockRecorder is the mock recorder for HealthDatabase.
type HealthDatabaseMockRecorder struct {
	mock *HealthDatabase
}

// NewHealthDatabase creates a new mock instance.
func NewHealthDatabase(ctrl *gomock.Controller) *HealthDatabase {
	mock := &HealthDatabase{ctrl: ctrl}
	mock.recorder = &HealthDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HealthDatabase) EXPECT() *HealthDatabaseMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *HealthDatabase) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *HealthDatabaseMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*HealthDatabase)(nil).Ping))
}
